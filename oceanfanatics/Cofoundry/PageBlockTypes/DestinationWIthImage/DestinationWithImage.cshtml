@using Cofoundry.Web

@model oceanfanatics.Cofoundry.PageBlockTypes.DestinationWIthImage.DestinationWithImageDisplayModel
@inject ICofoundryBlockTypeHelper<oceanfanatics.Cofoundry.PageBlockTypes.DestinationWIthImage.DestinationWithImageDisplayModel> Cofoundry

@{
    Cofoundry.BlockType.UseDisplayName("Destination with  image");
    var destination = Model;
    Layout = null;
}

<div class="relative center transition ease-in-out delay-150 bg-blue-500  hover:bg-indigo-500 duration-300">
    <div class="inline-block overflow-hidden h-full w-full">
        <img src="@Cofoundry.Routing.ImageAsset(Model.ImageId)" class="  hover:-translate-y-1 hover:scale-110 block object-cover" style="width:inherit; height:inherit"/>
    
    </div>
    @if (Model.IsEvent)
    {
        <div class="px-1 py-2 pl-2 absolute left-0 top-0 text-xs text-prose font-light text-white w-100 bg-blue bg-opacity-25">

            <a href="@Model.Link" class="font-semibold mt-2 text-sm">
                Participate <br />NOW
                <img src="~/images/arrow white.png" class="h-6 " />
            </a>
        </div>
    }
    <div class="pl-3 pb-3 px-1 py-2 absolute bottom-0 text-xs md:text-sm  text-prose font-light text-white w-100 bg-gradient-to-t from-black bg-opacity-25">
        <span class="font-semibold">@Model.Title</span>
        <br />
        <span>@Model.SubTitle</span>
        <br />
        @if (Model.Link != null)
        {
            <a href="@Model.Link" class="text-xs inline-flex items-center hover:text-white">
                @if (!Model.IsEvent)
                {
                    <span>View More</span>
                    <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                         class="w-4 h-4 ml-2" viewBox="0 0 24 24">
                        <path d="M5 12h14M12 5l7 7-7 7"></path>
                    </svg>
                }



            </a>
        }
    </div>

</div>


@*<!-- Main modal -->
<div id="@destination.Title" data-modal-show="false" aria-hidden="true" class="hidden overflow-x-hidden overflow-y-auto fixed h-modal md:h-full top-4 left-0 right-0 md:inset-0 z-50 justify-center items-center">
    <div class="relative w-full max-w-4xl px-4 h-full md:h-auto">
        <!-- Modal content -->
        <div class="bg-white rounded-lg shadow relative dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
                <h3 class="text-gray-900 text-xl lg:text-2xl font-semibold dark:text-white">
                    @destination.Title
                </h3>
                <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="@destination.Title">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                </button>
            </div>
            <!-- Modal body -->
            <div class="space-y-6">

                <div class="bg-gray-100 text-gray-500  w-full overflow-hidden" style="max-width:1000px">
                    <div class="md:flex w-full">
                        <div class="grid md:flex">
                            <div class="md:w-1/2 bg-white">

                                <section class="">
                                    <div class="relative">
                                        <!-- smaller images under description -->
                                        <div class="flex">
                                            @for (var i = 0; i < Model.Images.Count; i++)
                                            {
                                                <div>
                                                    <img class="h-24 opacity-50 hover:opacity-100 cursor-pointer" src="@Cofoundry.Routing.ImageAsset(Model.Images.ToArray()[i].Image)" onclick="currentSlide(@i+1)" />

                                                </div>
                                            }
                                        </div>
                                        <!-- large image on slides -->
                                        @for (var i = 0; i < Model.Images.Count; i++)
                                        {
                                            <div class="mySlides hidden">
                                                <div class="w-full object-cover">
                                                    <img src="@Cofoundry.Routing.ImageAsset(Model.Images.ToArray()[i].Image)" />
                                                    <span>@Model.Images.ToArray()[i].Title</span>
                                                </div>
                                            </div>
                                        }

                                    </div>
                                </section>





                            </div>
                            <div class="w-full md:w-1/2 py-10 px-5 md:px-10">
                                <div class="text-center mb-10">
                                    <h1 class="font-bold text-3xl text-gray-900">Inquire</h1>
                                    <p>Send us a message to inquire about this.</p>
                                </div>
                                @await Component.InvokeAsync("ContactUs", new { destination = destination.Title.ToString() })
                            </div>
                        </div>

                    </div>
                </div>


            </div>

        </div>
    </div>
</div>
*@
<script src="https://unpkg.com/flowbite@1.4.4/dist/flowbite.js"></script>


<script>
    //JS to switch slides and replace text in bar//
    var slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function showSlides(n) {
        var i;
        var slides = document.getElementsByClassName("mySlides");
        var dots = document.getElementsByClassName("description");
        var captionText = document.getElementById("caption");
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
        }
        for (i = 0; i < dots.length; i++) {
            dots[i].className = dots[i].className.replace(" opacity-100", "");
        }
        slides[slideIndex - 1].style.display = "block";
        dots[slideIndex - 1].className += " opacity-100";
        captionText.innerHTML = dots[slideIndex - 1].alt;
    }
</script>